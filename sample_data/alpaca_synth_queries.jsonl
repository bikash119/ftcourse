{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"group by HTTP method\"\n\nColumns: ['query_string_num_tokens', 'query_string_length', 'data_queries', 'http.target', 'task.id', 'trace_root.http.target', 'topic', 'http.host', 'total_hits', 'db.user', 'domain_types', 'db.name', 'graphql.document', 'history', 'http.scheme', 'http.method', 'frontend.version', 'disposition_for_dBVVysC8x4Ymwg9rtjMckgw9', 'db.system', 'event_name', 'organization', 'auth.logout', 'organizations', 'name', 'net.transport', 'db.operation', 'disposition_for_UvsPPBVUn9FDuzDjsjYCqopq', 'disposition_for_1RUGSd7GdnP5tuKdgqBRZUm2', 'process.pid', 'disposition_for_6uyAoBc3PuvEcTTPFgPM3Rtk', 'exception.stacktrace', 'data_ingestion_individuals_count', 'disposition_for_qrnUBUz8YBfNX7Liekq6nKi3', 'task_type.type', 'disposition_for_JQDNbuUdaQcEbEwQNxUbV5EF', 'disposition_for_rAcWoXfbHw4eWoJFH4ZcY8ue', 'disposition_for_eShqQoC9jUi9VQBidpp2oXHP', 'parent_name', 'template', 'graphql.operation.name', 'span.num_links', 'disposition_for_kNSPtvsCWkDoEyFP2QE6VPmQ', 'disposition_for_UUqf9L1qkFxDNEvcgsVMA2yy', 'disposition_for_vwbbN76HZ7uitLubvkUjPFQE', 'disposition_for_aAto1pGrdF5RunpSX8sY5hvn', 'disposition_for_UbKCMdnkPQ6TuHrfdBo5juZu', 'disposition_for_QfrvmoHxSgLPJXPKZCrZfGo8', 'disposition_for_NoKSSruBRCX6UG28PzmkybUd', 'disposition_for_UZAqvZ5XVBZjKKWuMeRkRayS', 'organization_token', 'duration_ms', 'trace.parent_id', 'db.statement', 'exception.message', 'error', 'service.name', 'http.status_code', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.method\"], \"calculations\": [{\"op\": \"COUNT\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"group by service name\"\n\nColumns: ['query_string_num_tokens', 'query_string_length', 'data_queries', 'http.method', 'task.id', 'trace_root.http.target', 'topic', 'http.host', 'total_hits', 'db.user', 'domain_types', 'db.name', 'graphql.document', 'history', 'http.scheme', 'http.target', 'frontend.version', 'disposition_for_dBVVysC8x4Ymwg9rtjMckgw9', 'db.system', 'event_name', 'organization', 'auth.logout', 'organizations', 'name', 'net.transport', 'db.operation', 'disposition_for_UvsPPBVUn9FDuzDjsjYCqopq', 'disposition_for_1RUGSd7GdnP5tuKdgqBRZUm2', 'process.pid', 'disposition_for_6uyAoBc3PuvEcTTPFgPM3Rtk', 'exception.stacktrace', 'data_ingestion_individuals_count', 'disposition_for_qrnUBUz8YBfNX7Liekq6nKi3', 'task_type.type', 'disposition_for_JQDNbuUdaQcEbEwQNxUbV5EF', 'disposition_for_rAcWoXfbHw4eWoJFH4ZcY8ue', 'disposition_for_eShqQoC9jUi9VQBidpp2oXHP', 'parent_name', 'template', 'graphql.operation.name', 'span.num_links', 'disposition_for_kNSPtvsCWkDoEyFP2QE6VPmQ', 'disposition_for_UUqf9L1qkFxDNEvcgsVMA2yy', 'disposition_for_vwbbN76HZ7uitLubvkUjPFQE', 'disposition_for_aAto1pGrdF5RunpSX8sY5hvn', 'disposition_for_UbKCMdnkPQ6TuHrfdBo5juZu', 'disposition_for_QfrvmoHxSgLPJXPKZCrZfGo8', 'disposition_for_NoKSSruBRCX6UG28PzmkybUd', 'disposition_for_UZAqvZ5XVBZjKKWuMeRkRayS', 'organization_token', 'duration_ms', 'trace.parent_id', 'db.statement', 'exception.message', 'error', 'service.name', 'http.status_code', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"service.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"group by database name\"\n\nColumns: ['query_string_num_tokens', 'query_string_length', 'data_queries', 'http.method', 'task.id', 'trace_root.http.target', 'topic', 'http.host', 'total_hits', 'db.user', 'domain_types', 'db.name', 'graphql.document', 'history', 'http.scheme', 'http.target', 'frontend.version', 'disposition_for_dBVVysC8x4Ymwg9rtjMckgw9', 'db.system', 'event_name', 'organization', 'auth.logout', 'organizations', 'name', 'net.transport', 'db.operation', 'disposition_for_UvsPPBVUn9FDuzDjsjYCqopq', 'disposition_for_1RUGSd7GdnP5tuKdgqBRZUm2', 'process.pid', 'disposition_for_6uyAoBc3PuvEcTTPFgPM3Rtk', 'exception.stacktrace', 'data_ingestion_individuals_count', 'disposition_for_qrnUBUz8YBfNX7Liekq6nKi3', 'task_type.type', 'disposition_for_JQDNbuUdaQcEbEwQNxUbV5EF', 'disposition_for_rAcWoXfbHw4eWoJFH4ZcY8ue', 'disposition_for_eShqQoC9jUi9VQBidpp2oXHP', 'parent_name', 'template', 'graphql.operation.name', 'span.num_links', 'disposition_for_kNSPtvsCWkDoEyFP2QE6VPmQ', 'disposition_for_UUqf9L1qkFxDNEvcgsVMA2yy', 'disposition_for_vwbbN76HZ7uitLubvkUjPFQE', 'disposition_for_aAto1pGrdF5RunpSX8sY5hvn', 'disposition_for_UbKCMdnkPQ6TuHrfdBo5juZu', 'disposition_for_QfrvmoHxSgLPJXPKZCrZfGo8', 'disposition_for_NoKSSruBRCX6UG28PzmkybUd', 'disposition_for_UZAqvZ5XVBZjKKWuMeRkRayS', 'organization_token', 'duration_ms', 'trace.parent_id', 'db.statement', 'exception.message', 'error', 'service.name', 'http.status_code', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"group by user agent\"\n\nColumns: ['query_string_num_tokens', 'query_string_length', 'data_queries', 'http.method', 'task.id', 'trace_root.http.target', 'topic', 'http.host', 'total_hits', 'db.user', 'domain_types', 'db.name', 'graphql.document', 'history', 'http.scheme', 'http.user_agent', 'frontend.version', 'disposition_for_dBVVysC8x4Ymwg9rtjMckgw9', 'db.system', 'event_name', 'organization', 'auth.logout', 'organizations', 'name', 'net.transport', 'db.operation', 'disposition_for_UvsPPBVUn9FDuzDjsjYCqopq', 'disposition_for_1RUGSd7GdnP5tuKdgqBRZUm2', 'process.pid', 'disposition_for_6uyAoBc3PuvEcTTPFgPM3Rtk', 'exception.stacktrace', 'data_ingestion_individuals_count', 'disposition_for_qrnUBUz8YBfNX7Liekq6nKi3', 'task_type.type', 'disposition_for_JQDNbuUdaQcEbEwQNxUbV5EF', 'disposition_for_rAcWoXfbHw4eWoJFH4ZcY8ue', 'disposition_for_eShqQoC9jUi9VQBidpp2oXHP', 'parent_name', 'template', 'graphql.operation.name', 'span.num_links', 'disposition_for_kNSPtvsCWkDoEyFP2QE6VPmQ', 'disposition_for_UUqf9L1qkFxDNEvcgsVMA2yy', 'disposition_for_vwbbN76HZ7uitLubvkUjPFQE', 'disposition_for_aAto1pGrdF5RunpSX8sY5hvn', 'disposition_for_UbKCMdnkPQ6TuHrfdBo5juZu', 'disposition_for_QfrvmoHxSgLPJXPKZCrZfGo8', 'disposition_for_NoKSSruBRCX6UG28PzmkybUd', 'disposition_for_UZAqvZ5XVBZjKKWuMeRkRayS', 'organization_token', 'duration_ms', 'trace.parent_id', 'db.statement', 'exception.message', 'error', 'service.name', 'http.status_code', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.user_agent\"], \"calculations\": [{\"op\": \"COUNT\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count of user logins\"\n\nColumns: ['env', 'thread.id', 'error', 'user_login', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"user_login\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"user_login\", \"op\": \"=\", \"value\": \"user logins\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count of log entries with event code 1076246\"\n\nColumns: ['env', 'thread.id', 'error', 'event_code', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"event_code\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"event_code\", \"op\": \"=\", \"value\": \"1076246\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count requests with specific response size\"\n\nColumns: ['env', 'thread.id', 'error', 'name', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"response_size\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"response_size\", \"op\": \"=\", \"value\": \"1076246\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count of events with the specific service name\"\n\nColumns: ['env', 'thread.id', 'error', 'service.name', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"service.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"service.name\", \"op\": \"=\", \"value\": \"1076246\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count of log entries with specific component name\"\n\nColumns: ['env', 'thread.id', 'error', 'component', 'name', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"component\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"component\", \"op\": \"=\", \"value\": \"1076246\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Request count for the 'purchase' endpoint\"\n\nColumns: ['env', 'thread.id', 'error', 'endpoint', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"endpoint\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"endpoint\", \"op\": \"=\", \"value\": \"purchase\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Thread name count\"\n\nColumns: ['env', 'thread.id', 'error', 'thread.name', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"thread.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"thread.name\", \"op\": \"=\", \"value\": \"MainThread\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count of log events by function name with a specific id\"\n\nColumns: ['env', 'thread.id', 'error', 'name', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"code.function\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"code.function\", \"op\": \"=\", \"value\": \"1076246\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count occurrences of a specific user agent\"\n\nColumns: ['env', 'thread.id', 'error', 'name', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'status_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"user_agent\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"user_agent\", \"op\": \"=\", \"value\": \"Mozilla\/5.0\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Count how many times the error code 404 was encountered\"\n\nColumns: ['env', 'thread.id', 'error', 'status_code', 'component', 'version', 'messaging.system', 'zone', 'node_id', 'thread.name', 'net.transport', 'process.pid', 'host.arch', 'exception.stacktrace', 'db.user', 'container.id', 'host.name', 'service.name', 'db.name', 'library.name', 'app.fee_code', 'library.version', 'exception.type', 'db.system', 'error_code', 'duration_ms', 'type', 'span.kind', 'messaging.destination', 'os.type', 'user_agent', 'response_size', 'code.function', 'db.sql.table', 'exception.message', 'os.description', 'http.target', 'telemetry.instrumentation_library', 'peer.address', 'parent_name', 'code.namespace', 'upstream_address', 'app.contract_id', 'net.peer.port', 'app.statement_id', 'response_flags', 'guid:x-request-id', 'app.ledger_adjustment_message_published', 'app.cost_id_published', 'db.statement', 'http.status_code', 'trace.parent_id', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"status_code\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"status_code\", \"op\": \"=\", \"value\": \"404\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find the number of spans for traceId 5d6f4c2ba03e7c8b94b26a414d571bfe\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"5d6f4c2ba03e7c8b94b26a414d571bfe\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"queryString=418e91572ff8bc8e9b258eafb09347ed\"\n\nColumns: ['trace.link.trace_id', 'trace.query_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.query_id\", \"op\": \"=\", \"value\": \"418e91572ff8bc8e9b258eafb09347ed\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find all occurrences for traceId=12a334bcde76f78a90b12345d67890ef\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"12a334bcde76f78a90b12345d67890ef\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"traceId=67b9e9c549b7d6c2d9bda4fc5e101048\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"67b9e9c549b7d6c2d9bda4fc5e101048\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Filter traces by traceId equal to 7c14f5bd9e8b8a2fed645a3012ca9ac3\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"7c14f5bd9e8b8a2fed645a3012ca9ac3\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find the number of events with traceId=9c562b624ec82b6f2bb0371b09ee5fe6\"\n\nColumns: ['trace.link.trace_id', 'trace.span_id', 'trace.parent_id', 'trace.trace_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"9c562b624ec82b6f2bb0371b09ee5fe6\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find the count of events with traceId=fbc3789079f418f7af3b9c5a556f2707\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"fbc3789079f418f7af3b9c5a556f2707\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Show the count of interactions where spanId equals 9b4e3c59492176e7b760f0d5a1b08e56\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.span_id\", \"op\": \"=\", \"value\": \"9b4e3c59492176e7b760f0d5a1b08e56\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"traceId=4ab9a1d47b2a8bcd9ae7ee663be312fa\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"4ab9a1d47b2a8bcd9ae7ee663be312fa\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Search for traces with traceId=9c5f2707af3789079f418f3bfbc556f2\"\n\nColumns: ['trace.link.trace_id', 'trace.trace_id', 'trace.parent_id', 'trace.span_id', 'trace.link.span_id', 'exception.stacktrace', 'error', 'env_id', 'name', 'net.transport', 'meta.refinery.reason', 'http.target', 'telemetry.instrumentation_library', 'graphql.source', 'tls.authorized', 'span.kind', 'telemetry.sdk.name', 'telemetry.sdk.language', 'http.url', 'type', 'duration_ms', 'service.name', 'meta.span_count', 'parent_name', 'net.peer.name', 'express.name', 'telemetry.sdk.version', 'express.type', 'library.name', 'http.flavor', 'exception.type', 'net.peer.port', 'http.route', 'meta.refinery.send_reason', 'status_code', 'http.host', 'tls.protocol', 'graphql.operation.name', 'exception.message', 'status_message', 'http.response_content_length_uncompressed', 'library.version', 'tls.alpnProtocol', 'net.host.port', 'http.user_agent', 'graphql.field.name', 'net.host.ip', 'meta.refinery.sample_key', 'net.host.name', 'dc_protocols', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"=\", \"value\": \"9c5f2707af3789079f418f3bfbc556f2\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find instances where the user ID is c123b456-e789-12d3-a456-426614174000\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'user_id', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'db.instance', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"user_id\", \"op\": \"=\", \"value\": \"c123b456-e789-12d3-a456-426614174000\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find occurrences of order id 7f82bc56-a9cb-4842-a235-b82a5e67a52a\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'request_id', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'db.instance', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"order_id\", \"op\": \"=\", \"value\": \"7f82bc56-a9cb-4842-a235-b82a5e67a52a\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Locate transactions for item id b5a72a87-32af-4b8e-9a1d-ed1d6a1b7bbd\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'db.instance', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"item_id\", \"op\": \"=\", \"value\": \"b5a72a87-32af-4b8e-9a1d-ed1d6a1b7bbd\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Locate events with order uuid c12a82d6-f95e-4b5d-a473-5d8e4b2295c3\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'order_uuid', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'request_id', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"order_uuid\", \"op\": \"=\", \"value\": \"c12a82d6-f95e-4b5d-a473-5d8e4b2295c3\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find events for client-uuid 7b3e717b-6b8d-4e2f-a267-ac1f1b0b5e43\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'client-uuid', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'request_id', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'db.instance', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"client-uuid\", \"op\": \"=\", \"value\": \"7b3e717b-6b8d-4e2f-a267-ac1f1b0b5e43\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find interactions with order uuid 5a5b2e77-b2eb-46df-9f09-bb9a6e3b4a93\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'interaction_id', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"order_uuid\", \"op\": \"=\", \"value\": \"5a5b2e77-b2eb-46df-9f09-bb9a6e3b4a93\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Show me the count of occurrences for the order ID 7f4d5c57-a6bf-460a-bc46-2b0e50130d85\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'request_id', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"order_id\", \"op\": \"=\", \"value\": \"7f4d5c57-a6bf-460a-bc46-2b0e50130d85\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Search for occurrences of the item ID b9f1af8b-eced-4f44-a8b4-2f31f1aefa59\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'item_id', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'request_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'db.instance', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"item_id\", \"op\": \"=\", \"value\": \"b9f1af8b-eced-4f44-a8b4-2f31f1aefa59\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Find occurrences of error code 500\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'http.status_code', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'item_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"http.status_code\", \"op\": \"=\", \"value\": \"500\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Locate transactions with item ID 5f6a39b3-c54f-4ec5-9e64-1cdeadbeef01\"\n\nColumns: ['service_dc_2', 'service_dc_1', 'item_id', 'service_dc_4', 'service_dc_3', 'service_dc_5', 'order_uuid', 'ref_id', 'event_id', 'order_id', 'event_identifier', 'context_id', 'client-uuid', 'jaeger-debug-id', 'found', 'instrument_uuid', 'payment_id', 'node.refId', 'request_id', 'org_id', 'component_id', 'orgId', 'authn.client', 'http.connect.35.186.239.66:443.error', 'dashboard_uid', 'message.id', 'UID', 'concurrent_requests_during_evaluation', 'url', 'elasticsearch.url', 'dashboard_title', 'userId', 'topic', 'service.name', 'index', 'http.connect.35.227.209.171:443.error', 'plugin_id', 'hostname', 'elasticsearch.params', 'db.instance', 'datasource.uid', 'kafka-topic', 'trace.link.trace_id', 'elasticsearch.headers', 'dashboard', 'meta.refinery.reason', 'resource_namespace', 'id', 'http.local', 'tags', 'http.status_code', 'http.route', 'service_name', 'message', 'trace.parent_id', 'name', 'db.statement', 'exception.message', 'parent_name', 'error', 'duration_ms', 'namespace', 'kind']"},{"from":"gpt","value":"\n{\"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"item_id\", \"op\": \"=\", \"value\": \"5f6a39b3-c54f-4ec5-9e64-1cdeadbeef01\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"occurrences where http.route includes the phrase 'user profile updated'\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.route\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"http.route\", \"op\": \"contains\", \"value\": \"user profile updated\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"instances where db.name contains the text 'initiated transaction'\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"db.name\", \"op\": \"contains\", \"value\": \"initiated transaction\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"incidents where error messages include 'failed connection'\"\n\nColumns: ['message', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'log.level', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"message\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"message\", \"op\": \"contains\", \"value\": \"failed connection\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"occurrences where log.level includes the phrase \\\"failed authentication\\\"\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"log.level\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"log.level\", \"op\": \"contains\", \"value\": \"failed authentication\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"instances where db.statement includes the term \\\"INSERT INTO orders\\\"\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.statement\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"db.statement\", \"op\": \"contains\", \"value\": \"INSERT INTO orders\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"occurrences where db.name includes the phrase 'query execution'\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"db.name\", \"op\": \"contains\", \"value\": \"query execution\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"incidents with a message containing 'failure in process'\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"message\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"message\", \"op\": \"contains\", \"value\": \"failure in process\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"incidents where error message includes 'authentication failed'\"\n\nColumns: ['log.message', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"log.message\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"log.message\", \"op\": \"contains\", \"value\": \"authentication failed\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"occurrences where exception.message includes the phrase 'database connection failure'\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"exception.message\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"exception.message\", \"op\": \"contains\", \"value\": \"database connection failure\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"operations where db.name includes the string 'user_authentication'\"\n\nColumns: ['log.level', 'event.provider', 'liveview.event', 'telemetry.sdk.language', 'message', 'exception.stacktrace', 'exception.message', 'net.transport', 'phoenix.plug', 'liveview.callback', 'http.method', 'db.statement', 'span.num_events', 'telemetry.sdk.name', 'meta.signal_type', 'db.instance', 'db.name', 'telemetry.sdk.version', 'liveview.uri', 'db.type', 'exception.type', 'service.version', 'service.instance.id', 'meta.annotation_type', 'http.target', 'liveview.module', 'source', 'trace.trace_id', 'span.kind', 'http.scheme', 'library.version', 'service.name', 'db.url', 'phoenix.action', 'queue_time_microseconds', 'query_time_microseconds', 'service.namespace', 'trace.span_id', 'process.runtime.description', 'trace.parent_id', 'type', 'parent_name', 'library.name', 'name', 'host', 'process.runtime.version', 'http.flavor', 'error', 'net.host.name', 'http.user_agent', 'duration_ms', 'http.route', 'http.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"db.name\", \"op\": \"contains\", \"value\": \"user_authentication\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 604800}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.url contains api-endpoint\"\n\nColumns: ['http.route', 'graphql.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.method', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.url\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.url\", \"op\": \"contains\", \"value\": \"api-endpoint\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.url includes api endpoint\"\n\nColumns: ['http.route', 'graphql.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.method', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.url\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.url\", \"op\": \"contains\", \"value\": \"api\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.url includes graphql endpoint\"\n\nColumns: ['http.route', 'graphql.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.method', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.url\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.url\", \"op\": \"contains\", \"value\": \"graphql\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.method starts with POST\"\n\nColumns: ['http.method', 'graphql.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.route', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.method\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.method\", \"op\": \"starts-with\", \"value\": \"POST\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.url includes the gateway endpoint\"\n\nColumns: ['http.route', 'graphql.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.method', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.url\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.url\", \"op\": \"contains\", \"value\": \"gateway\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.url includes an API endpoint\"\n\nColumns: ['http.route', 'api.endpoint.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.method', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.url\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.url\", \"op\": \"contains\", \"value\": \"API endpoint\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"http.url contains endpoint\"\n\nColumns: ['http.route', 'graphql.path', 'graphql.source', 'graphql.field.path', 'graphql.field.type', 'graphql.field.name', 'graphql.operation.name', 'graphql.operation.type', 'http.method', 'http.url', 'graphql.field_name', 'rpc.method', 'express.type', 'graphql.max_query_complexity', 'graphql.complexity', 'http.host', 'http.scheme', 'rpc.service', 'nestjs.type', 'graphql.requested_query_complexity', 'nestjs.controller', 'express.name', 'http.target', 'net.transport', 'http.response.body.error', 'plaid.webhook_code', 'nestjs.callback', 'vesta.webhook.path', 'nestjs.version', 'exception.stacktrace', 'auth.scopes', 'rpc.system', 'nestjs.module', 'service.name', 'exception.type', 'exception.stack', 'net.host.port', 'tls.authorized', 'session.type', 'plaid.webhook_type', 'db.name', 'trace.link.trace_id', 'span.kind', 'customer.logo_uri', 'net.host.ip', 'http.response_content_length', 'sendgrid.to_email', 'http.status_code', 'tls.protocol', 'http.flavor', 'error', 'duration_ms', 'trace.parent_id', 'exception.message', 'parent_name', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.url\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"HEATMAP\"}], \"filters\": [{\"column\": \"http.url\", \"op\": \"contains\", \"value\": \"endpoint\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each developer-name and the corresponding trace they're working with\"\n\nColumns: ['developer-name', 'trace.trace_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.span_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"developer-name\", \"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"developer-name\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each agent-name with the associated span they belong to\"\n\nColumns: ['agent-name', 'trace.span_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.trace_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"agent-name\", \"trace.span_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"agent-name\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each worker-name and the trace associated with it\"\n\nColumns: ['worker-name', 'trace.trace_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.span_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"worker-name\", \"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"worker-name\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Inspect each worker-label and the related trace identifier\"\n\nColumns: ['worker-label', 'trace.trace_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.span_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"worker-label\", \"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"worker-label\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each participant-name and the associated trace they're linked to\"\n\nColumns: ['participant-name', 'trace.trace_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.span_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"participant-name\", \"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"participant-name\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"view each user_agent and the sessions associated with it\"\n\nColumns: ['user_agent', 'session.session_id', 'device.os', 'user.session_number', 'user.session_id', 'session.event_id', 'session.parent_id', 'application_name', 'name', 'user.event_type', 'user.referrer', 'source', 'session.status', 'branch', 'user.activity', 'user.application', 'interaction_type', 'service.name', 'application.status', 'meta.source', 'website', 'service_name', 'user.head_ref', 'action_name', 'page_branch', 'user.actor', 'user.base_ref', 'visitor_id', 'user.sha', 'status', 'user.repository', 'interaction_duration_ms', 'meta.arch', 'user.repository_owner', 'meta.version', 'analytics_provider', 'meta.os', 'session_num', 'user.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"user_agent\", \"session.session_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"user_agent\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each tester-name along with the trace it is engaged in\"\n\nColumns: ['tester-name', 'trace.trace_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.span_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"tester-name\", \"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"tester-name\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each device-id along with the process that is associated with it\"\n\nColumns: ['device-id', 'process.process_id', 'device.os', 'account.run_number', 'account.run_id', 'process.span_id', 'process.parent_id', 'workflow_name', 'name', 'account.event_name', 'account.ref', 'source', 'job.status', 'branch', 'account.job', 'account.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'account.head_ref', 'command_name', 'pr_branch', 'account.actor', 'account.base_ref', 'pr_user', 'account.sha', 'status', 'account.repository', 'duration_ms', 'meta.arch', 'account.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'account.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"device-id\", \"process.process_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"device-id\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display each device-id and the associated trace it interacts with\"\n\nColumns: ['device-id', 'trace.trace_id', 'runner.os', 'github.run_number', 'github.run_id', 'trace.span_id', 'trace.parent_id', 'workflow_name', 'name', 'github.event_name', 'github.ref', 'source', 'job.status', 'branch', 'github.job', 'github.workflow', 'cmd', 'service.name', 'workflow.status', 'meta.source', 'repo', 'service_name', 'github.head_ref', 'command_name', 'pr_branch', 'github.actor', 'github.base_ref', 'pr_user', 'github.sha', 'status', 'github.repository', 'duration_ms', 'meta.arch', 'github.repository_owner', 'meta.version', 'ci_provider', 'meta.os', 'build_num', 'github.matrix-key', 'http.route']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"device-id\", \"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"device-id\", \"op\": \"exists\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Display traces from the past five minutes\"\n\nColumns: ['trace.trace_id', 'duration_ms', 'trace.span_id', 'trace.parent_id', 'message', 'name', 'path', 'error', 'user_id', 'process.pid', 'span.num_events', 'process.owner', 'parent_name', 'http.route', 'status_message', 'type', 'span.kind', 'service.name', 'telemetry.sdk.language', 'method', 'http.method', 'telemetry.sdk.name', 'process.runtime.description', 'process.runtime.name', 'telemetry.sdk.version', 'library.name', 'span.num_links', 'process.command', 'meta.signal_type', 'status_code', 'process.runtime.version', 'process.command_args', 'process.executable.path', 'http.status_code', 'process.executable.name', 'meta.annotation_type']"},{"from":"gpt","value":"\n{\"time_range\": 300}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Retrieve the list of recent requests from the last five minutes\"\n\nColumns: ['trace.trace_id', 'duration_s', 'trace.span_id', 'trace.parent_id', 'message', 'name', 'path', 'error', 'user.id', 'process.pid', 'span.event_count', 'process.owner', 'caller_name', 'route.path', 'status_message', 'resource.type', 'span.type', 'service.identifier', 'language.runtime', 'http.verb', 'http.method', 'sdk.name', 'runtime.description', 'runtime.name', 'sdk.version', 'library.version', 'span.link_count', 'process.executable', 'signal.type', 'http.code', 'runtime.version', 'process.arguments', 'file.path', 'http.response_code', 'executable.name', 'annotation.type']"},{"from":"gpt","value":"\n{\"time_range\": 300, \"breakdowns\": [\"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Display active sessions within the past 5 minutes\"\n\nColumns: ['session.session_id', 'duration_ms', 'session.span_id', 'session.parent_id', 'message', 'name', 'path', 'error', 'user_id', 'process.pid', 'span.num_events', 'process.owner', 'parent_name', 'http.route', 'status_message', 'type', 'span.kind', 'service.name', 'telemetry.sdk.language', 'method', 'http.method', 'telemetry.sdk.name', 'process.runtime.description', 'process.runtime.name', 'telemetry.sdk.version', 'library.name', 'span.num_links', 'process.command', 'meta.signal_type', 'status_code', 'process.runtime.version', 'process.command_args', 'process.executable.path', 'http.status_code', 'process.executable.name', 'meta.annotation_type']"},{"from":"gpt","value":"\n{\"time_range\": 300, \"breakdowns\": [\"session.session_id\"]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Display recent trace events within the past 5 minutes\"\n\nColumns: ['trace.trace_id', 'duration_ms', 'trace.span_id', 'trace.parent_id', 'message', 'name', 'path', 'error', 'user_id', 'process.pid', 'span.num_events', 'process.owner', 'parent_name', 'http.route', 'status_message', 'type', 'span.kind', 'service.name', 'telemetry.sdk.language', 'method', 'http.method', 'telemetry.sdk.name', 'process.runtime.description', 'process.runtime.name', 'telemetry.sdk.version', 'library.name', 'span.num_links', 'process.command', 'meta.signal_type', 'status_code', 'process.runtime.version', 'process.command_args', 'process.executable.path', 'http.status_code', 'process.executable.name', 'meta.annotation_type']"},{"from":"gpt","value":"\n{\"time_range\": 300, \"breakdowns\": [\"trace.trace_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"trace.trace_id\", \"op\": \"exists\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"list recent transactions in the past 5 minutes\"\n\nColumns: ['transaction.id', 'duration_ms', 'transaction.span_id', 'transaction.parent_id', 'message', 'name', 'path', 'error', 'user_id', 'process.pid', 'span.num_events', 'process.owner', 'parent_name', 'http.route', 'status_message', 'type', 'span.kind', 'service.name', 'telemetry.sdk.language', 'method', 'http.method', 'telemetry.sdk.name', 'process.runtime.description', 'process.runtime.name', 'telemetry.sdk.version', 'library.name', 'span.num_links', 'process.command', 'meta.signal_type', 'status_code', 'process.runtime.version', 'process.command_args', 'process.executable.path', 'http.status_code', 'process.executable.name', 'meta.annotation_type']"},{"from":"gpt","value":"\n{\"time_range\": 300, \"breakdowns\": [\"transaction.id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display recent trace activity within the last 5 minutes\"\n\nColumns: ['trace.trace_id', 'duration_ms', 'trace.span_id', 'trace.parent_id', 'message', 'name', 'path', 'error', 'user_id', 'process.pid', 'span.num_events', 'process.owner', 'caller_name', 'http.route', 'status_message', 'type', 'span.kind', 'service.name', 'telemetry.sdk.language', 'method', 'http.method', 'telemetry.sdk.name', 'process.runtime.description', 'process.runtime.name', 'telemetry.sdk.version', 'library.name', 'span.num_links', 'process.command', 'meta.signal_type', 'status_code', 'process.runtime.version', 'process.command_args', 'process.executable.path', 'http.status_code', 'process.executable.name', 'meta.annotation_type']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"service.name\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"service.name\", \"op\": \"exists\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 300}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"database calls with the highest average durations\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'DbErrors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.system\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"AVG\"}], \"filters\": [{\"column\": \"db.system\", \"op\": \"exists\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"AVG\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"top login events by duration in the 90th percentile\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"login.legacy\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"database calls with the highest latency in the upper 10%\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'rpc.calls']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.system\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"top database calls by average duration\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.system\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"AVG\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"AVG\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"database operations in the top 10% for execution time\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'operation', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"operation\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Top decile of long-running background tasks\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'background.task', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"background.task\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Top long-running database operations in the bottom 10% percentile\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.system\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"top 10% of slowest database queries\"\n\nColumns: ['parent_name', 'duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'transaction_name', 'trace.parent_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'trace.trace_id', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"transaction_name\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"database calls with the highest 90th percentile latency\"\n\nColumns: ['duration_ms', 'db.system', 'login.legacy', 'rpc.system', 'db.user', 'error', 'net.transport', 'net.host.name', 'trace.trace_id', 'http.target', 'rpc.service', 'meta.refinery.reason', 'rpc.method', 'span.kind', 'db.statement', 'report_dependencies.num_photos', 'http.url', 'meta.refinery.original_sample_rate', 'login.provider', 'login.sso', 'type', 'report_id', 'library.name', 'fusionauth.find_user.response_total', 'meta.annotation_type', 'service.name', 'report_dependencies.num_signatories', 'net.host.port', 'message.type', 'library.version', 'exception.type', 'parent_name', 'inspection_id', 'span.num_links', 'fusionauth.find_user.record_count', 'Errors']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.system\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"P90\"}], \"filters\": [{\"column\": \"parent_name\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"orders\": [{\"column\": \"duration_ms\", \"op\": \"P90\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display average processing time for transactions on endpoint \/api\/orders\/submit\"\n\nColumns: ['duration_ms', 'process.pid', 'api.endpoint', 'process.command', 'process.runtime.description', 'process.runtime.version', 'http.status_code', 'http.method', 'http.response_content_length_uncompressed', 'http.host', 'status_code', 'net.transport', 'process.runtime.name', 'db.operation', 'service.name', 'net.host.port', 'process.executable.path', 'process.owner', 'http.request_content_length_uncompressed', 'trace.trace_id', 'http.status_text', 'process.command_args', 'db.system', 'http.target', 'tls.protocol', 'db.connection_string', 'http.scheme', 'process.executable.name', 'tls.authorized', 'db.name', 'trace.span_id', 'net.peer.port', 'net.host.name', 'tls.alpnProtocol', 'http.user_agent', 'http.client_ip', 'telemetry.instrumentation_library', 'net.host.ip', 'db.user', 'db.statement', 'trace.parent_id', 'peer.ipv4', 'tls.certificate.validTo', 'telemetry.sdk.version', 'telemetry.sdk.language', 'name', 'tls.certificate.serialNumber', 'library.version', 'db.sql.table', 'span.num_events', 'http.route', 'service_name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"api.endpoint\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"AVG\"}], \"filters\": [{\"column\": \"api.endpoint\", \"op\": \"=\", \"value\": \"\/api\/orders\/submit\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"display mean load time for endpoint \/api\/v1\/users\/fetch\"\n\nColumns: ['duration_ms', 'process.pid', 'http.endpoint', 'process.command', 'process.runtime.description', 'process.runtime.version', 'http.status_code', 'http.method', 'http.response_content_length_uncompressed', 'http.host', 'status_code', 'net.transport', 'process.runtime.name', 'db.operation', 'service.name', 'net.host.port', 'process.executable.path', 'process.owner', 'http.request_content_length_uncompressed', 'trace.trace_id', 'http.status_text', 'process.command_args', 'db.system', 'http.target', 'tls.protocol', 'db.connection_string', 'http.scheme', 'process.executable.name', 'tls.authorized', 'db.name', 'trace.span_id', 'net.peer.port', 'net.host.name', 'tls.alpnProtocol', 'http.user_agent', 'http.client_ip', 'telemetry.instrumentation_library', 'net.host.ip', 'db.user', 'db.statement', 'trace.parent_id', 'peer.ipv4', 'tls.certificate.validTo', 'telemetry.sdk.version', 'telemetry.sdk.language', 'name', 'tls.certificate.serialNumber', 'library.version', 'db.sql.table', 'span.num_events', 'http.route', 'service_name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.endpoint\"], \"calculations\": [{\"column\": \"duration_ms\", \"op\": \"AVG\"}], \"filters\": [{\"column\": \"http.endpoint\", \"op\": \"=\", \"value\": \"\/api\/v1\/users\/fetch\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Could you identify the initiating requests for the specified grpc.endpoint?\"\n\nColumns: ['grpc.endpoint', 'messaging.url', 'grpc.protocol', 'grpc.target', 'grpc.host', 'grpc.method', 'request.host', 'grpc.client.request.size.p999', 'grpc.scheme', 'grpc.version', 'grpc.route', 'request.path', 'grpc.server.request.size.p999', 'request.id', 'out.host', 'grpc.client.request.size.p001', 'aws.queue_url', 'grpc.server.request.size.p01', 'grpc.hostname', 'grpc.client.request.size.p01', 'grpc.client.duration.p001', 'grpc.client.request.size.p99', 'grpc.client.request.size.sum', 'grpc.client.duration.p999', 'grpc.client.request.size.p75', 'grpc.client.response.size.p999', 'grpc.server.request.size.p001', 'user_agent.original', 'grpc.client.request.size.p05', 'grpc.client.request.size.p95', 'net.transport', 'guid:x-request-id', 'rpc.method', 'grpc.server.request.size.p05', 'grpc.useragent', 'grpc.server.request.size.p99', 'query', 'grpc.server.request.size.p75', 'grpc.server.response.size.p999', 'grpc.server.request.size.sum', 'grpc.client.request.size.count', 'thread.id', 'grpc.client.request.size.avg', 'grpc.server.request.size.p95', 'grpc.server.duration.p999', 'akka.grpc.hostname', 'graphql.path', 'grpc.user_agent', 'resource.name', 'grpc.server.duration.p001', 'trace.parent_id', 'name', 'service_name', 'exception.message', 'parent_name', 'duration_ms', 'db.statement', 'error', 'grpc.status_code']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"trace.parent_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"grpc.endpoint\", \"op\": \"=\", \"value\": \"com.example.myapplication.GetData\", \"join_column\": \"\"}, {\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 2419200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"Could you identify the initial requests to the given RPC method?\"\n\nColumns: ['rpc.method', 'messaging.url', 'http.protocol', 'http.target', 'http.host', 'http.method', 'request.host', 'http.client.request.size.p999', 'http.scheme', 'http.version', 'http.route', 'request.path', 'http.server.request.size.p999', 'request.id', 'out.host', 'http.client.request.size.p001', 'aws.queue_url', 'http.server.request.size.p01', 'http.hostname', 'http.client.request.size.p01', 'http.client.duration.p001', 'http.client.request.size.p99', 'http.client.request.size.sum', 'http.client.duration.p999', 'http.client.request.size.p75', 'http.client.response.size.p999', 'http.server.request.size.p001', 'user_agent.original', 'http.client.request.size.p05', 'http.client.request.size.p95', 'net.transport', 'guid:x-request-id', 'http.server.request.size.p05', 'http.useragent', 'http.server.request.size.p99', 'query', 'http.server.request.size.p75', 'http.server.response.size.p999', 'http.server.request.size.sum', 'http.client.request.size.count', 'thread.id', 'http.client.request.size.avg', 'http.server.request.size.p95', 'http.server.duration.p999', 'akka.http.hostname', 'graphql.path', 'http.user_agent', 'resource.name', 'http.server.duration.p001', 'trace.parent_id', 'name', 'service_name', 'exception.message', 'parent_name', 'duration_ms', 'db.statement', 'error', 'http.status_code', 'http.url']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"trace.parent_id\"], \"calculations\": [{\"op\": \"COUNT\"}], \"filters\": [{\"column\": \"rpc.method\", \"op\": \"=\", \"value\": \"MyRpc.call\", \"join_column\": \"\"}, {\"column\": \"trace.parent_id\", \"op\": \"does-not-exist\", \"join_column\": \"\"}], \"filter_combination\": \"AND\", \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 2419200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"highest average execution time per minute in the last 60 days\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"duration_ms\", \"op\": \"RATE_AVG\"}], \"time_range\": 5184000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"maximum session authentication attempts per minute in the past 60 days\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"app.authz.attempts\", \"op\": \"RATE_MAX\"}], \"time_range\": 5184000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"maximum transactions per minute over the past two months\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"app.event_count\", \"op\": \"RATE_MAX\"}], \"time_range\": 5184000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"maximum rate of user logins over the last 60 days\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code', 'authn.session.id']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"authn.session.id\", \"op\": \"RATE_MAX\"}], \"time_range\": 5184000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"maximum rate of server errors over the past 60 days\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"error\", \"op\": \"RATE_MAX\"}], \"filters\": [{\"column\": \"error\", \"op\": \"=\", \"value\": true}], \"time_range\": 5184000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"most frequent user logins over the past 60 days\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code', 'app.login_frequency']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"app.login_frequency\", \"op\": \"RATE_MAX\"}], \"time_range\": 5184000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"maximum application visits per minute over the prior 90 days\"\n\nColumns: ['duration_ms', 'app.visit_count', 'app.vp_visits_count', 'app.new_visit_not_started_event_count', 'app.event_count', 'sampling.priority', 'duration_ms_log10', 'authn.session.id', 'duration_log10', 'sli_3500', 'app.calendar_visits_count', 'app.authz.attempts', 'rpc.system', 'runtime.event_loop.lag_ms', 'app.nmor.resident_count', 'db.system', 'runtime.cpu.user', 'db.user', 'rpc.method', 'app.cron-name', 'net.transport', 'sampling.priority_reason', 'runtime.event_loop.lag', 'app.conditions_count', 'error', 'aws.request.id', 'status_code', 'app.end', 'runtime.cpu.system', 'span.num_events', 'app.enriched_visits_length', 'app.operations_count', 'app.agency_count', 'http.response_content_length_uncompressed', 'messaging.system', 'app.agencies.count', 'app.nmor.batch_count', 'express.type', 'http.user_agent', 'app.care_recipients_to_make_active.count', 'app.new_caregiver_not_checked_in_event_count', 'exception.stacktrace', 'rpc.service', 'message', 'sentry-trace_id', 'app.permissions.cache_hit', 'app.authz.operations_count', 'http.request_content_length_uncompressed', 'sli_task_scheduling', 'app.gziped_cache.unzip_time_ms', '*', 'name', 'db.statement', 'service.name', 'exception.message', 'parent_name', 'http.route', 'trace.parent_id', 'http.status_code', 'app.visit_count']"},{"from":"gpt","value":"\n{\"calculations\": [{\"column\": \"app.visit_count\", \"op\": \"RATE_MAX\"}], \"time_range\": 7776000}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"how do i retrieve the total run times of functions marked with @timed\"\n\nColumns: ['trace.span_id', 'span.num_events', 'total_run_time', 'span.num_links', 'span.kind', 'meta.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"total_run_time\"], \"filters\": [{\"column\": \"meta.annotation_type\", \"op\": \"=\", \"value\": \"timed\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"What's the method for retrieving durations tied to a @MainScope tag?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'duration_ms', 'span.num_links', 'span.kind', 'main.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"duration_ms\"], \"filters\": [{\"column\": \"main.annotation_type\", \"op\": \"=\", \"value\": \"MainScope\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"How can I retrieve execution times for functions marked by @withspan annotation?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'execution_time_ms', 'span.num_links', 'span.kind', 'meta.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"execution_time_ms\"], \"filters\": [{\"column\": \"meta.annotation_type\", \"op\": \"=\", \"value\": \"@withspan\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"What is the method execution time when labeled with @async?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'duration_ms', 'span.num_links', 'span.kind', 'meta.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"duration_ms\"], \"filters\": [{\"column\": \"meta.annotation_type\", \"op\": \"=\", \"value\": \"async\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"How to extract execution time for functions tagged with @activitytracking\"\n\nColumns: ['trace.span_id', 'span.num_events', 'execution_time', 'span.num_links', 'span.kind', 'meta.tracking_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"execution_time\"], \"filters\": [{\"column\": \"meta.tracking_type\", \"op\": \"=\", \"value\": \"activitytracking\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"How can I identify durations for a function marked with @endpoint?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'duration_ms', 'span.num_links', 'span.kind', 'meta.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"duration_ms\"], \"filters\": [{\"column\": \"meta.annotation_type\", \"op\": \"=\", \"value\": \"endpoint\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"What are the execution times per operation having the custom @logged annotation?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'execution_time', 'span.num_links', 'span.kind', 'custom.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'custom.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"execution_time\"], \"filters\": [{\"column\": \"custom.annotation_type\", \"op\": \"=\", \"value\": \"logged\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"How can I identify all response times for endpoints flagged with @loggable?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'duration_ms', 'span.num_links', 'span.kind', 'meta.logging_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"duration_ms\"], \"filters\": [{\"column\": \"meta.logging_type\", \"op\": \"=\", \"value\": \"loggable\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"What is the way to get all execution times for functions with the @trackperformance annotation?\"\n\nColumns: ['trace.span_id', 'span.num_events', 'execution_time_ms', 'span.num_links', 'span.kind', 'meta.execution_annot', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"execution_time_ms\"], \"filters\": [{\"column\": \"meta.execution_annot\", \"op\": \"=\", \"value\": \"trackperformance\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"What are the response times for operations tagged with @tracked\"\n\nColumns: ['trace.span_id', 'span.num_events', 'response_time_ms', 'span.num_links', 'span.kind', 'meta.annotation_type', 'exception.stacktrace', 'code.namespace', 'process.runtime.description', 'http.method', 'rpc.method', 'container.id', 'honeycomb.distro.version', 'honeycomb.distro.variant', 'http.route', 'telemetry.instrumentation_library', 'http.url', 'db.sql.table', 'library.version', 'honeycomb.distro.runtime_version', 'sentry-trace_id', 'telemetry.sdk.language', 'trace.trace_id', 'process.executable.path', 'process.runtime.name', 'trace.parent_id', 'process.runtime.version', 'request.type', 'user.name', 'db.system', 'db.statement', 'db.operation', 'meta.signal_type', 'http.response_content_length', 'library.name', 'exception.type', 'request.ui', 'process.command_line', 'app.version', 'os.description', 'name', 'http.request_content_length', 'messaging.operation', 'code.function', 'http.target', 'status_code', 'thread.id', 'exception.message', 'service.name', 'db.name', 'parent_name', 'http.status_code', 'error']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"response_time_ms\"], \"filters\": [{\"column\": \"meta.annotation_type\", \"op\": \"=\", \"value\": \"@tracked\", \"join_column\": \"\"}]}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"db operation insert count\"\n\nColumns: ['db.operation', 'sqs.process.update_ach_payment.count', 'sqs.read.total.count', 'sqs.read.update_ach_payment.count', 'sqs.read.unknown.count', 'event', 'ach.pw.processing_id', 'eventCount', 'aws.queue.url', 'sqs.process.event.type', 'db.sql.table', 'process.pid', 'service.namespace', 'ach.pw.completed', 'ach.pw.query_time.end', 'db.system', 'code.namespace', 'ach.pw.query_time.start', 'db.name', 'exception.stacktrace', 'process.command_line', 'db.user', 'ach.payment.status', 'ach.payment.entry_status', 'code.function', 'ach.payment.source', 'process.runtime.description', 'db.statement', 'http.method', 'exception.message', 'ach.pw.records.count', 'span.num_events', 'service.name', 'db.connection_string', 'ach.payment_id', 'error', 'thread.id', 'ach.payment.settlement_date', 'process.executable.path', 'process.runtime.name', 'exception.type', 'cloud.platform', 'ach.pw.started', 'http.target', 'parent_name', 'rpc.method', 'cloud.availability_zone', 'thread.name', 'trace.parent_id', 'http.response_content_length', 'duration_ms', 'http.route', 'http.status_code', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"db.operation\"], \"filters\": [{\"column\": \"db.operation\", \"op\": \"=\", \"value\": \"insert\"}], \"calculations\": [{\"op\": \"COUNT\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"count of updated ACH payment SQS events\"\n\nColumns: ['sqs.process.event.type', 'sqs.process.update_ach_payment.count', 'sqs.read.total.count', 'sqs.read.update_ach_payment.count', 'sqs.read.unknown.count', 'event', 'ach.pw.processing_id', 'eventCount', 'aws.queue.url', 'db.operation', 'db.sql.table', 'process.pid', 'service.namespace', 'ach.pw.completed', 'ach.pw.query_time.end', 'db.system', 'code.namespace', 'ach.pw.query_time.start', 'db.name', 'exception.stacktrace', 'process.command_line', 'db.user', 'ach.payment.status', 'ach.payment.entry_status', 'code.function', 'ach.payment.source', 'process.runtime.description', 'db.statement', 'http.method', 'exception.message', 'ach.pw.records.count', 'span.num_events', 'service.name', 'db.connection_string', 'ach.payment_id', 'error', 'thread.id', 'ach.payment.settlement_date', 'process.executable.path', 'process.runtime.name', 'exception.type', 'cloud.platform', 'ach.pw.started', 'http.target', 'parent_name', 'rpc.method', 'cloud.availability_zone', 'thread.name', 'trace.parent_id', 'http.response_content_length', 'duration_ms', 'http.route', 'http.status_code', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"sqs.process.update_ach_payment.count\"], \"filters\": [{\"column\": \"sqs.process.update_ach_payment.count\", \"op\": \"exists\"}], \"calculations\": [{\"op\": \"COUNT\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"delete http events count\"\n\nColumns: ['http.method', 'sqs.process.update_ach_payment.count', 'sqs.read.total.count', 'sqs.read.update_ach_payment.count', 'sqs.read.unknown.count', 'event', 'ach.pw.processing_id', 'eventCount', 'aws.queue.url', 'db.operation', 'db.sql.table', 'process.pid', 'service.namespace', 'ach.pw.completed', 'ach.pw.query_time.end', 'db.system', 'code.namespace', 'ach.pw.query_time.start', 'db.name', 'exception.stacktrace', 'process.command_line', 'db.user', 'ach.payment.status', 'ach.payment.entry_status', 'code.function', 'ach.payment.source', 'process.runtime.description', 'db.statement', 'http.method', 'exception.message', 'ach.pw.records.count', 'span.num_events', 'service.name', 'db.connection_string', 'ach.payment_id', 'error', 'thread.id', 'ach.payment.settlement_date', 'process.executable.path', 'process.runtime.name', 'exception.type', 'cloud.platform', 'ach.pw.started', 'http.target', 'parent_name', 'rpc.method', 'cloud.availability_zone', 'thread.name', 'trace.parent_id', 'http.response_content_length', 'duration_ms', 'http.route', 'http.status_code', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"http.method\"], \"filters\": [{\"column\": \"http.method\", \"op\": \"=\", \"value\": \"DELETE\"}], \"calculations\": [{\"op\": \"COUNT\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
{"conversations":[{"from":"system","value":"Honeycomb is an observability platform that allows you to write queries to inspect trace data. You are an assistant that takes a natural language query (NLQ) and a list of valid columns and produce a Honeycomb query."},{"from":"human","value":"\n\nNLQ: \"sqs message processing count\"\n\nColumns: ['sqs.message.processing.type', 'sqs.process.update_ach_payment.count', 'sqs.read.total.count', 'sqs.read.update_ach_payment.count', 'sqs.read.unknown.count', 'event', 'ach.pw.processing_id', 'eventCount', 'aws.queue.url', 'db.operation', 'db.sql.table', 'process.pid', 'service.namespace', 'ach.pw.completed', 'ach.pw.query_time.end', 'db.system', 'code.namespace', 'ach.pw.query_time.start', 'db.name', 'exception.stacktrace', 'process.command_line', 'db.user', 'ach.payment.status', 'ach.payment.entry_status', 'code.function', 'ach.payment.source', 'process.runtime.description', 'db.statement', 'http.method', 'exception.message', 'ach.pw.records.count', 'span.num_events', 'service.name', 'db.connection_string', 'ach.payment_id', 'error', 'thread.id', 'ach.payment.settlement_date', 'process.executable.path', 'process.runtime.name', 'exception.type', 'cloud.platform', 'ach.pw.started', 'http.target', 'parent_name', 'rpc.method', 'cloud.availability_zone', 'thread.name', 'trace.parent_id', 'http.response_content_length', 'duration_ms', 'http.route', 'http.status_code', 'name']"},{"from":"gpt","value":"\n{\"breakdowns\": [\"sqs.message.processing.type\"], \"filters\": [{\"column\": \"sqs.message.processing.type\", \"op\": \"=\", \"value\": \"sqs.message.processing.count\"}], \"calculations\": [{\"op\": \"COUNT\"}], \"orders\": [{\"op\": \"COUNT\", \"order\": \"descending\"}], \"time_range\": 7200}"}]}
