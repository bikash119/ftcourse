,user_input,response,prompt,error,COUNT,candidate_cols,full_completion
0,latency distribution by status code,"{""breakdowns"":[""status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}","Honeycomb AI suggests queries based on user input.

COLUMNS:status_code,http.response.status_code,duration_ms,code.lineno,network.protocol.version,code.namespace,telemetry.sdk.language,meta.signal_type,server.address,library.version,idle_ns,span.type,busy_ns,trace.trace_id,span.kind,trace.span_id,os.type,http.route,code.filepath,http.request.method,url.scheme,service.name,telemetry.sdk.version,thread.id,span.num_events,user_agent.original,type,url.path,library.name,span.num_links,trace.parent_id,telemetry.sdk.name,name,thread.name,service_name

QUERY SPEC:
All top-level keys are optional.

```json
""calculations"":[
    // ops: COUNT, CONCURRENCY, COUNT_DISTINCT, HEATMAP, SUM, AVG, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX
    {""op"": ""COUNT""},// COUNT and CONCURRENCY are just op
    {""op"": ""HEATMAP"", ""column"": ""name""}
],
""filters"":[
    // ops: =, !=, >, >=, <, <=, starts-with, does-not-start-with, exists, does-not-exist, contains, does-not-contain, in, not-in
    {""column"": ""name"", ""op"": ""exists""}, // exists and does-not-exist ops only have column
    {""column"": ""name"", ""op"": ""="", ""value"": ""something""}
],
""filter_combination"": ""AND"", // AND or OR
""breakdowns"":[
    // columns in COLUMNS
    ""column1"",""column2""
],
""orders"":[
    // HEATMAP not allowed
    // Must come from breakdowns or calculations
    {""op"": ""op_in_calculation"", ""column"": ""column_in_calculation"", ""order"": ""ascending""},
    {""op"": ""COUNT"", ""order"": ""descending""}, // COUNT and CONCURRENCY have no column
    {""column"": ""column1"", ""order"": ""descending""},
],
""havings"":[
    // HEATMAP not allowed
    {""calculate_op"": ""op_in_calculation"", ""column"": ""name"", ""op"": ""OPNAME"", ""value"": 100},
    {""calculate_op"": ""COUNT"", ""op"": "">"", ""value"": 10}, // COUNT and CONCURRENCY have no column
],
""time_range"": 7200, // Relative time range in seconds.
""start_time"": 1234567890, // UNIX timestamp
""end_time"": 1234567890, // UNIX timestamp
```

TIPS:
COUNT counts events/spans. COUNT_DISTINCT counts unique values of columns.
HEATMAP shows value distributions.
trace.parent_id does-not-exist shows root span of a trace. Use that to count requests and traces.
name is a span or span event.
parent_name is the name of a span that created a span event.

When the user input is asking about a time range (such as ""yesterday"" or ""since last week""),
always use the time_range, start_time, and end_time fields. time_range
is relative and can be combined with either start_time or end_time but not both.

Modify existing query or create a new query based on NLQ. Only include the query in your response.

NLQ: Slow requests
EXISTING QUERY:
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}],""time_range"":7200}

NLQ: Latency distribution by status code
EXISTING QUERY:
{""breakdowns"":[""status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}

NLQ: by endpoint and operation
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}
{""breakdowns"":[""http.route"",""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}

NLQ: by service
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}
{""breakdowns"":[""service_name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}

NLQ: where span is client_request
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""time_range"":604800}
{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""},{""column"":""name"",""op"":""="",""value"":""client_request"",""join_column"":""""}],""time_range"":604800}

NLQ: add count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}

NLQ: remove count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}

NLQ: add count
EXISTING QUERY:
{""calculations"":[{""op"":""COUNT""}]}

NLQ: slow requests
EXISTING QUERY:{""breakdowns"":[""name""],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}


NLQ:latency distribution by status code
EXISTING QUERY:",,1.0,"['status_code', 'http.response.status_code', 'duration_ms', 'code.lineno', 'network.protocol.version', 'code.namespace', 'telemetry.sdk.language', 'meta.signal_type', 'server.address', 'library.version', 'idle_ns', 'span.type', 'busy_ns', 'trace.trace_id', 'span.kind', 'trace.span_id', 'os.type', 'http.route', 'code.filepath', 'http.request.method', 'url.scheme', 'service.name', 'telemetry.sdk.version', 'thread.id', 'span.num_events', 'user_agent.original', 'type', 'url.path', 'library.name', 'span.num_links', 'trace.parent_id', 'telemetry.sdk.name', 'name', 'thread.name', 'service_name']","Honeycomb AI suggests queries based on user input.

COLUMNS:status_code,http.response.status_code,duration_ms,code.lineno,network.protocol.version,code.namespace,telemetry.sdk.language,meta.signal_type,server.address,library.version,idle_ns,span.type,busy_ns,trace.trace_id,span.kind,trace.span_id,os.type,http.route,code.filepath,http.request.method,url.scheme,service.name,telemetry.sdk.version,thread.id,span.num_events,user_agent.original,type,url.path,library.name,span.num_links,trace.parent_id,telemetry.sdk.name,name,thread.name,service_name

QUERY SPEC:
All top-level keys are optional.

```json
""calculations"":[
    // ops: COUNT, CONCURRENCY, COUNT_DISTINCT, HEATMAP, SUM, AVG, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX
    {""op"": ""COUNT""},// COUNT and CONCURRENCY are just op
    {""op"": ""HEATMAP"", ""column"": ""name""}
],
""filters"":[
    // ops: =, !=, >, >=, <, <=, starts-with, does-not-start-with, exists, does-not-exist, contains, does-not-contain, in, not-in
    {""column"": ""name"", ""op"": ""exists""}, // exists and does-not-exist ops only have column
    {""column"": ""name"", ""op"": ""="", ""value"": ""something""}
],
""filter_combination"": ""AND"", // AND or OR
""breakdowns"":[
    // columns in COLUMNS
    ""column1"",""column2""
],
""orders"":[
    // HEATMAP not allowed
    // Must come from breakdowns or calculations
    {""op"": ""op_in_calculation"", ""column"": ""column_in_calculation"", ""order"": ""ascending""},
    {""op"": ""COUNT"", ""order"": ""descending""}, // COUNT and CONCURRENCY have no column
    {""column"": ""column1"", ""order"": ""descending""},
],
""havings"":[
    // HEATMAP not allowed
    {""calculate_op"": ""op_in_calculation"", ""column"": ""name"", ""op"": ""OPNAME"", ""value"": 100},
    {""calculate_op"": ""COUNT"", ""op"": "">"", ""value"": 10}, // COUNT and CONCURRENCY have no column
],
""time_range"": 7200, // Relative time range in seconds.
""start_time"": 1234567890, // UNIX timestamp
""end_time"": 1234567890, // UNIX timestamp
```

TIPS:
COUNT counts events/spans. COUNT_DISTINCT counts unique values of columns.
HEATMAP shows value distributions.
trace.parent_id does-not-exist shows root span of a trace. Use that to count requests and traces.
name is a span or span event.
parent_name is the name of a span that created a span event.

When the user input is asking about a time range (such as ""yesterday"" or ""since last week""),
always use the time_range, start_time, and end_time fields. time_range
is relative and can be combined with either start_time or end_time but not both.

Modify existing query or create a new query based on NLQ. Only include the query in your response.

NLQ: Slow requests
EXISTING QUERY:
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}],""time_range"":7200}

NLQ: Latency distribution by status code
EXISTING QUERY:
{""breakdowns"":[""status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}

NLQ: by endpoint and operation
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}
{""breakdowns"":[""http.route"",""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}

NLQ: by service
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}
{""breakdowns"":[""service_name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}

NLQ: where span is client_request
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""time_range"":604800}
{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""},{""column"":""name"",""op"":""="",""value"":""client_request"",""join_column"":""""}],""time_range"":604800}

NLQ: add count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}

NLQ: remove count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}

NLQ: add count
EXISTING QUERY:
{""calculations"":[{""op"":""COUNT""}]}

NLQ: slow requests
EXISTING QUERY:{""breakdowns"":[""name""],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}


NLQ:latency distribution by status code
EXISTING QUERY:{""breakdowns"":[""status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}"
1,calculate deployment frequency using honeycomb markers,"{""breakdowns"":[""honeycomb.distro.version""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""honeycomb.distro.version"",""op"":""exists"",""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}","Honeycomb AI suggests queries based on user input.

COLUMNS:honeycomb.distro.version,amazonaws.com/ECS/ContainerInsights/DeploymentCount.count,amazonaws.com/ECS/ContainerInsights/DeploymentCount.sum,honeycomb.distro.runtime_version,amazonaws.com/ECS/ContainerInsights/DeploymentCount.avg,amazonaws.com/ECS/ContainerInsights/DeploymentCount.min,amazonaws.com/ECS/ContainerInsights/DeploymentCount.max,container.memory.utilized,container.memory.usage,container.cpu.utilized,container cpu usage (%),container.network.rate.rx,container memory usage (%),amazonaws.com/AWS/ElastiCache/MemoryFragmentationRatio.count,amazonaws.com/AWS/ElastiCache/MemoryFragmentationRatio.sum,graphql.variables.interval,amazonaws.com/AWS/ElastiCache/MemoryFragmentationRatio.avg,ecs.task.network.rate.rx,container.cpu.onlines,scrape_samples_post_metric_relabeling,container.memory.usage.max,success_rate,container.memory.usage.limit,container.cpu.usage.total,amazonaws.com/ECS/ContainerInsights/DesiredTaskCount.avg,amazonaws.com/ECS/ContainerInsights/TaskSetCount.count,amazonaws.com/AWS/ElastiCache/CacheHitRate.count,up,amazonaws.com/ECS/ContainerInsights/TaskSetCount.avg,amazonaws.com/AWS/ElastiCache/TrafficManagementActive.avg,amazonaws.com/AWS/ElastiCache/DatabaseCapacityUsagePercentage.count,container.network.io.usage.rx_packets,space,amazonaws.com/AWS/ElastiCache/CacheHitRate.sum,container.cpu.usage.system,nodejs_eventloop_lag_mean_seconds,container.duration,amazonaws.com/ECS/ContainerInsights/ContainerInstanceCount.count,nodejs_gc_duration_seconds.p99,amazonaws.com/AWS/ElastiCache/DatabaseCapacityUsageCountedForEvictPercentage.avg,amazonaws.com/AWS/ElastiCache/KeysTracked.avg,amazonaws.com/AWS/ElastiCache/NetworkPacketsOut.count,flags,container.network.rate.tx,amazonaws.com/ECS/ContainerInsights/TaskSetCount.min,amazonaws.com/AWS/ES/KNNCircuitBreakerTriggered.count,amazonaws.com/AWS/ElastiCache/Reclaimed.avg,amazonaws.com/AWS/ElastiCache/NetworkPacketsOut.avg,amazonaws.com/AWS/ES/KibanaHeapUtilization.count,amazonaws.com/ECS/ContainerInsights/TaskSetCount.sum,service_name,exception.message,duration_ms,http.route,trace.parent_id,http.status_code,db.statement,parent_name,error,name

QUERY SPEC:
All top-level keys are optional.

```json
""calculations"":[
    // ops: COUNT, CONCURRENCY, COUNT_DISTINCT, HEATMAP, SUM, AVG, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX
    {""op"": ""COUNT""},// COUNT and CONCURRENCY are just op
    {""op"": ""HEATMAP"", ""column"": ""name""}
],
""filters"":[
    // ops: =, !=, >, >=, <, <=, starts-with, does-not-start-with, exists, does-not-exist, contains, does-not-contain, in, not-in
    {""column"": ""name"", ""op"": ""exists""}, // exists and does-not-exist ops only have column
    {""column"": ""name"", ""op"": ""="", ""value"": ""something""}
],
""filter_combination"": ""AND"", // AND or OR
""breakdowns"":[
    // columns in COLUMNS
    ""column1"",""column2""
],
""orders"":[
    // HEATMAP not allowed
    // Must come from breakdowns or calculations
    {""op"": ""op_in_calculation"", ""column"": ""column_in_calculation"", ""order"": ""ascending""},
    {""op"": ""COUNT"", ""order"": ""descending""}, // COUNT and CONCURRENCY have no column
    {""column"": ""column1"", ""order"": ""descending""},
],
""havings"":[
    // HEATMAP not allowed
    {""calculate_op"": ""op_in_calculation"", ""column"": ""name"", ""op"": ""OPNAME"", ""value"": 100},
    {""calculate_op"": ""COUNT"", ""op"": "">"", ""value"": 10}, // COUNT and CONCURRENCY have no column
],
""time_range"": 7200, // Relative time range in seconds.
""start_time"": 1234567890, // UNIX timestamp
""end_time"": 1234567890, // UNIX timestamp
```

TIPS:
COUNT counts events/spans. COUNT_DISTINCT counts unique values of columns.
HEATMAP shows value distributions.
trace.parent_id does-not-exist shows root span of a trace. Use that to count requests and traces.
name is a span or span event.
parent_name is the name of a span that created a span event.

When the user input is asking about a time range (such as ""yesterday"" or ""since last week""),
always use the time_range, start_time, and end_time fields. time_range
is relative and can be combined with either start_time or end_time but not both.

Modify existing query or create a new query based on NLQ. Only include the query in your response.

NLQ: Exception count by exception and caller
EXISTING QUERY:
{""breakdowns"":[""exception.message"",""parent_name""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""exception.message"",""op"":""exists"",""join_column"":""""},{""column"":""parent_name"",""op"":""exists"",""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Error count
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""error"",""op"":""="",""value"":true,""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Error rate
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Slow requests
EXISTING QUERY:
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}],""time_range"":7200}

NLQ: Latency distribution by status code
EXISTING QUERY:
{""breakdowns"":[""http.status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""http.status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}

NLQ: Most time consuming db queries
EXISTING QUERY:
{""breakdowns"":[""name"",""db.statement""],""calculations"":[{""column"":""duration_ms"",""op"":""SUM""}],""filters"":[{""column"":""db.statement"",""op"":""exists"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""SUM"",""order"":""descending""}],""time_range"":7200}

NLQ: Slow db queries
EXISTING QUERY:
{""breakdowns"":[""db.statement""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""db.statement"",""op"":""exists"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""P95"",""order"":""descending""}],""time_range"":604800}

NLQ: by endpoint and operation
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}
{""breakdowns"":[""http.route"",""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}

NLQ: by service
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}
{""breakdowns"":[""service_name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}

NLQ: where span is client_request
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""time_range"":604800}
{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""},{""column"":""name"",""op"":""="",""value"":""client_request"",""join_column"":""""}],""time_range"":604800}

NLQ: add count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}

NLQ: remove count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}

NLQ: add count
EXISTING QUERY:
{""calculations"":[{""op"":""COUNT""}]}

NLQ: slow requests
EXISTING QUERY:{""breakdowns"":[""name""],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}


NLQ:calculate deployment frequency using honeycomb markers
EXISTING QUERY:",,1.0,"['honeycomb.distro.version', 'amazonaws.com/ECS/ContainerInsights/DeploymentCount.count', 'amazonaws.com/ECS/ContainerInsights/DeploymentCount.sum', 'honeycomb.distro.runtime_version', 'amazonaws.com/ECS/ContainerInsights/DeploymentCount.avg', 'amazonaws.com/ECS/ContainerInsights/DeploymentCount.min', 'amazonaws.com/ECS/ContainerInsights/DeploymentCount.max', 'container.memory.utilized', 'container.memory.usage', 'container.cpu.utilized', 'container']","Honeycomb AI suggests queries based on user input.

COLUMNS:honeycomb.distro.version,amazonaws.com/ECS/ContainerInsights/DeploymentCount.count,amazonaws.com/ECS/ContainerInsights/DeploymentCount.sum,honeycomb.distro.runtime_version,amazonaws.com/ECS/ContainerInsights/DeploymentCount.avg,amazonaws.com/ECS/ContainerInsights/DeploymentCount.min,amazonaws.com/ECS/ContainerInsights/DeploymentCount.max,container.memory.utilized,container.memory.usage,container.cpu.utilized,container cpu usage (%),container.network.rate.rx,container memory usage (%),amazonaws.com/AWS/ElastiCache/MemoryFragmentationRatio.count,amazonaws.com/AWS/ElastiCache/MemoryFragmentationRatio.sum,graphql.variables.interval,amazonaws.com/AWS/ElastiCache/MemoryFragmentationRatio.avg,ecs.task.network.rate.rx,container.cpu.onlines,scrape_samples_post_metric_relabeling,container.memory.usage.max,success_rate,container.memory.usage.limit,container.cpu.usage.total,amazonaws.com/ECS/ContainerInsights/DesiredTaskCount.avg,amazonaws.com/ECS/ContainerInsights/TaskSetCount.count,amazonaws.com/AWS/ElastiCache/CacheHitRate.count,up,amazonaws.com/ECS/ContainerInsights/TaskSetCount.avg,amazonaws.com/AWS/ElastiCache/TrafficManagementActive.avg,amazonaws.com/AWS/ElastiCache/DatabaseCapacityUsagePercentage.count,container.network.io.usage.rx_packets,space,amazonaws.com/AWS/ElastiCache/CacheHitRate.sum,container.cpu.usage.system,nodejs_eventloop_lag_mean_seconds,container.duration,amazonaws.com/ECS/ContainerInsights/ContainerInstanceCount.count,nodejs_gc_duration_seconds.p99,amazonaws.com/AWS/ElastiCache/DatabaseCapacityUsageCountedForEvictPercentage.avg,amazonaws.com/AWS/ElastiCache/KeysTracked.avg,amazonaws.com/AWS/ElastiCache/NetworkPacketsOut.count,flags,container.network.rate.tx,amazonaws.com/ECS/ContainerInsights/TaskSetCount.min,amazonaws.com/AWS/ES/KNNCircuitBreakerTriggered.count,amazonaws.com/AWS/ElastiCache/Reclaimed.avg,amazonaws.com/AWS/ElastiCache/NetworkPacketsOut.avg,amazonaws.com/AWS/ES/KibanaHeapUtilization.count,amazonaws.com/ECS/ContainerInsights/TaskSetCount.sum,service_name,exception.message,duration_ms,http.route,trace.parent_id,http.status_code,db.statement,parent_name,error,name

QUERY SPEC:
All top-level keys are optional.

```json
""calculations"":[
    // ops: COUNT, CONCURRENCY, COUNT_DISTINCT, HEATMAP, SUM, AVG, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX
    {""op"": ""COUNT""},// COUNT and CONCURRENCY are just op
    {""op"": ""HEATMAP"", ""column"": ""name""}
],
""filters"":[
    // ops: =, !=, >, >=, <, <=, starts-with, does-not-start-with, exists, does-not-exist, contains, does-not-contain, in, not-in
    {""column"": ""name"", ""op"": ""exists""}, // exists and does-not-exist ops only have column
    {""column"": ""name"", ""op"": ""="", ""value"": ""something""}
],
""filter_combination"": ""AND"", // AND or OR
""breakdowns"":[
    // columns in COLUMNS
    ""column1"",""column2""
],
""orders"":[
    // HEATMAP not allowed
    // Must come from breakdowns or calculations
    {""op"": ""op_in_calculation"", ""column"": ""column_in_calculation"", ""order"": ""ascending""},
    {""op"": ""COUNT"", ""order"": ""descending""}, // COUNT and CONCURRENCY have no column
    {""column"": ""column1"", ""order"": ""descending""},
],
""havings"":[
    // HEATMAP not allowed
    {""calculate_op"": ""op_in_calculation"", ""column"": ""name"", ""op"": ""OPNAME"", ""value"": 100},
    {""calculate_op"": ""COUNT"", ""op"": "">"", ""value"": 10}, // COUNT and CONCURRENCY have no column
],
""time_range"": 7200, // Relative time range in seconds.
""start_time"": 1234567890, // UNIX timestamp
""end_time"": 1234567890, // UNIX timestamp
```

TIPS:
COUNT counts events/spans. COUNT_DISTINCT counts unique values of columns.
HEATMAP shows value distributions.
trace.parent_id does-not-exist shows root span of a trace. Use that to count requests and traces.
name is a span or span event.
parent_name is the name of a span that created a span event.

When the user input is asking about a time range (such as ""yesterday"" or ""since last week""),
always use the time_range, start_time, and end_time fields. time_range
is relative and can be combined with either start_time or end_time but not both.

Modify existing query or create a new query based on NLQ. Only include the query in your response.

NLQ: Exception count by exception and caller
EXISTING QUERY:
{""breakdowns"":[""exception.message"",""parent_name""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""exception.message"",""op"":""exists"",""join_column"":""""},{""column"":""parent_name"",""op"":""exists"",""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Error count
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""error"",""op"":""="",""value"":true,""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Error rate
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Slow requests
EXISTING QUERY:
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}],""time_range"":7200}

NLQ: Latency distribution by status code
EXISTING QUERY:
{""breakdowns"":[""http.status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""http.status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}

NLQ: Most time consuming db queries
EXISTING QUERY:
{""breakdowns"":[""name"",""db.statement""],""calculations"":[{""column"":""duration_ms"",""op"":""SUM""}],""filters"":[{""column"":""db.statement"",""op"":""exists"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""SUM"",""order"":""descending""}],""time_range"":7200}

NLQ: Slow db queries
EXISTING QUERY:
{""breakdowns"":[""db.statement""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""db.statement"",""op"":""exists"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""P95"",""order"":""descending""}],""time_range"":604800}

NLQ: by endpoint and operation
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}
{""breakdowns"":[""http.route"",""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}

NLQ: by service
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}
{""breakdowns"":[""service_name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}

NLQ: where span is client_request
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""time_range"":604800}
{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""},{""column"":""name"",""op"":""="",""value"":""client_request"",""join_column"":""""}],""time_range"":604800}

NLQ: add count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}

NLQ: remove count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""service_name"",""op"":""exists"",""join_column"":""""}]}

NLQ: add count
EXISTING QUERY:
{""calculations"":[{""op"":""COUNT""}]}

NLQ: slow requests
EXISTING QUERY:{""breakdowns"":[""name""],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}


NLQ:calculate deployment frequency using honeycomb markers
EXISTING QUERY:{""breakdowns"":[""honeycomb.distro.version""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""honeycomb.distro.version"",""op"":""exists"",""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}"
2,error,"{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}","Honeycomb AI suggests queries based on user input.

COLUMNS:error,zone,type,name,component,response_size,status_code,span.kind,node_id,service.name,request_size,http.url,user_agent,duration_ms,response_flags,http.method,http.protocol,guid:x-request-id,peer.address,cluster_name,trace.parent_id,trace.span_id,trace.trace_id,http.status_code,upstream_cluster,span.num_events,istio.namespace,istio.canonical_revision,span.num_links,meta.signal_type,istio.canonical_service,downstream_cluster,log10_duration_ms,dc.contract_guid,upstream_cluster.name,istio.mesh_id,k8s.cluster.name,http.route

QUERY SPEC:
All top-level keys are optional.

```json
""calculations"":[
    // ops: COUNT, CONCURRENCY, COUNT_DISTINCT, HEATMAP, SUM, AVG, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX
    {""op"": ""COUNT""},// COUNT and CONCURRENCY are just op
    {""op"": ""HEATMAP"", ""column"": ""name""}
],
""filters"":[
    // ops: =, !=, >, >=, <, <=, starts-with, does-not-start-with, exists, does-not-exist, contains, does-not-contain, in, not-in
    {""column"": ""name"", ""op"": ""exists""}, // exists and does-not-exist ops only have column
    {""column"": ""name"", ""op"": ""="", ""value"": ""something""}
],
""filter_combination"": ""AND"", // AND or OR
""breakdowns"":[
    // columns in COLUMNS
    ""column1"",""column2""
],
""orders"":[
    // HEATMAP not allowed
    // Must come from breakdowns or calculations
    {""op"": ""op_in_calculation"", ""column"": ""column_in_calculation"", ""order"": ""ascending""},
    {""op"": ""COUNT"", ""order"": ""descending""}, // COUNT and CONCURRENCY have no column
    {""column"": ""column1"", ""order"": ""descending""},
],
""havings"":[
    // HEATMAP not allowed
    {""calculate_op"": ""op_in_calculation"", ""column"": ""name"", ""op"": ""OPNAME"", ""value"": 100},
    {""calculate_op"": ""COUNT"", ""op"": "">"", ""value"": 10}, // COUNT and CONCURRENCY have no column
],
""time_range"": 7200, // Relative time range in seconds.
""start_time"": 1234567890, // UNIX timestamp
""end_time"": 1234567890, // UNIX timestamp
```

TIPS:
COUNT counts events/spans. COUNT_DISTINCT counts unique values of columns.
HEATMAP shows value distributions.
trace.parent_id does-not-exist shows root span of a trace. Use that to count requests and traces.
name is a span or span event.
parent_name is the name of a span that created a span event.

When the user input is asking about a time range (such as ""yesterday"" or ""since last week""),
always use the time_range, start_time, and end_time fields. time_range
is relative and can be combined with either start_time or end_time but not both.

Modify existing query or create a new query based on NLQ. Only include the query in your response.

NLQ: Error count
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Error rate
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Slow requests
EXISTING QUERY:
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}],""time_range"":7200}

NLQ: Latency distribution by status code
EXISTING QUERY:
{""breakdowns"":[""http.status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""http.status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}

NLQ: by endpoint and operation
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}
{""breakdowns"":[""http.route"",""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}

NLQ: by service
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}
{""breakdowns"":[""service.name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}

NLQ: where span is client_request
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""time_range"":604800}
{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""},{""column"":""name"",""op"":""="",""value"":""client_request"",""join_column"":""""}],""time_range"":604800}

NLQ: add count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}

NLQ: remove count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""service.name"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""service.name"",""op"":""exists"",""join_column"":""""}]}

NLQ: add count
EXISTING QUERY:
{""calculations"":[{""op"":""COUNT""}]}

NLQ: slow requests
EXISTING QUERY:{""breakdowns"":[""name""],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}


NLQ:error
EXISTING QUERY:",,1.0,"['error', 'zone', 'type', 'name', 'component', 'response_size', 'status_code', 'span.kind', 'node_id', 'service.name', 'request_size', 'http.url', 'user_agent', 'duration_ms', 'response_flags', 'http.method', 'http.protocol', 'guid:x-request-id', 'peer.address', 'cluster_name', 'trace.parent_id', 'trace.span_id', 'trace.trace_id', 'http.status_code', 'upstream_cluster', 'span.num_events', 'istio.namespace', 'istio.canonical_revision', 'span.num_links', 'meta.signal_type', 'istio.canonical_service', 'downstream_cluster', 'log10_duration_ms', 'dc.contract_guid', 'upstream_cluster.name', 'istio.mesh_id', 'k8s.cluster.name', 'http.route']","Honeycomb AI suggests queries based on user input.

COLUMNS:error,zone,type,name,component,response_size,status_code,span.kind,node_id,service.name,request_size,http.url,user_agent,duration_ms,response_flags,http.method,http.protocol,guid:x-request-id,peer.address,cluster_name,trace.parent_id,trace.span_id,trace.trace_id,http.status_code,upstream_cluster,span.num_events,istio.namespace,istio.canonical_revision,span.num_links,meta.signal_type,istio.canonical_service,downstream_cluster,log10_duration_ms,dc.contract_guid,upstream_cluster.name,istio.mesh_id,k8s.cluster.name,http.route

QUERY SPEC:
All top-level keys are optional.

```json
""calculations"":[
    // ops: COUNT, CONCURRENCY, COUNT_DISTINCT, HEATMAP, SUM, AVG, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX
    {""op"": ""COUNT""},// COUNT and CONCURRENCY are just op
    {""op"": ""HEATMAP"", ""column"": ""name""}
],
""filters"":[
    // ops: =, !=, >, >=, <, <=, starts-with, does-not-start-with, exists, does-not-exist, contains, does-not-contain, in, not-in
    {""column"": ""name"", ""op"": ""exists""}, // exists and does-not-exist ops only have column
    {""column"": ""name"", ""op"": ""="", ""value"": ""something""}
],
""filter_combination"": ""AND"", // AND or OR
""breakdowns"":[
    // columns in COLUMNS
    ""column1"",""column2""
],
""orders"":[
    // HEATMAP not allowed
    // Must come from breakdowns or calculations
    {""op"": ""op_in_calculation"", ""column"": ""column_in_calculation"", ""order"": ""ascending""},
    {""op"": ""COUNT"", ""order"": ""descending""}, // COUNT and CONCURRENCY have no column
    {""column"": ""column1"", ""order"": ""descending""},
],
""havings"":[
    // HEATMAP not allowed
    {""calculate_op"": ""op_in_calculation"", ""column"": ""name"", ""op"": ""OPNAME"", ""value"": 100},
    {""calculate_op"": ""COUNT"", ""op"": "">"", ""value"": 10}, // COUNT and CONCURRENCY have no column
],
""time_range"": 7200, // Relative time range in seconds.
""start_time"": 1234567890, // UNIX timestamp
""end_time"": 1234567890, // UNIX timestamp
```

TIPS:
COUNT counts events/spans. COUNT_DISTINCT counts unique values of columns.
HEATMAP shows value distributions.
trace.parent_id does-not-exist shows root span of a trace. Use that to count requests and traces.
name is a span or span event.
parent_name is the name of a span that created a span event.

When the user input is asking about a time range (such as ""yesterday"" or ""since last week""),
always use the time_range, start_time, and end_time fields. time_range
is relative and can be combined with either start_time or end_time but not both.

Modify existing query or create a new query based on NLQ. Only include the query in your response.

NLQ: Error count
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Error rate
EXISTING QUERY:
{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""orders"":[{""op"":""COUNT"",""order"":""descending""}],""time_range"":7200}

NLQ: Slow requests
EXISTING QUERY:
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}],""time_range"":7200}

NLQ: Latency distribution by status code
EXISTING QUERY:
{""breakdowns"":[""http.status_code""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""P95""}],""filters"":[{""column"":""http.status_code"",""op"":""exists"",""join_column"":""""}],""time_range"":7200}

NLQ: by endpoint and operation
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}
{""breakdowns"":[""http.route"",""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""column"":""duration_ms"",""op"":""MAX""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""orders"":[{""column"":""duration_ms"",""op"":""MAX"",""order"":""descending""}]}

NLQ: by service
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}
{""breakdowns"":[""service.name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}

NLQ: where span is client_request
EXISTING QUERY:{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""}],""time_range"":604800}
{""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""trace.parent_id"",""op"":""does-not-exist"",""join_column"":""""},{""column"":""name"",""op"":""="",""value"":""client_request"",""join_column"":""""}],""time_range"":604800}

NLQ: add count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""http.route"",""op"":""exists"",""join_column"":""""}]}

NLQ: remove count
EXISTING QUERY:{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""},{""op"":""COUNT""}],""filters"":[{""column"":""service.name"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""name""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}],""filters"":[{""column"":""service.name"",""op"":""exists"",""join_column"":""""}]}

NLQ: add count
EXISTING QUERY:
{""calculations"":[{""op"":""COUNT""}]}

NLQ: slow requests
EXISTING QUERY:{""breakdowns"":[""name""],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}
{""breakdowns"":[""http.route""],""calculations"":[{""column"":""duration_ms"",""op"":""HEATMAP""}]}


NLQ:error
EXISTING QUERY:{""breakdowns"":[""error""],""calculations"":[{""op"":""COUNT""}],""filters"":[{""column"":""error"",""op"":""exists"",""join_column"":""""}]}"
